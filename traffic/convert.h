
#include <pcapplusplus/ProtocolType.h>
#include <string>

int getProtocolTypeAsNum(pcpp::ProtocolType protocolType)
{
    switch (protocolType)
    {
    case pcpp::Ethernet:
        return 1;
    case pcpp::IPv4:
        return 2;
    case pcpp::IPv6:
        return 3;
    case pcpp::UDP:
        return 4;
    case pcpp::TCP:
        return 5;
    case pcpp::HTTPRequest:
    case pcpp::HTTPResponse:
    case pcpp::HTTP:
        return 6;
    case pcpp::ARP:
        return 7;
    case pcpp::VLAN:
        return 8;
    case pcpp::ICMP:
        return 9;
    case pcpp::PPPoE:
    case pcpp::PPPoESession:
    case pcpp::PPPoEDiscovery:
        return 10;
    case pcpp::DNS:
        return 11;
    case pcpp::MPLS:
        return 12;
    case pcpp::GRE:
    case pcpp::GREv0:
    case pcpp::GREv1:
        return 13;
    case pcpp::PPP_PPTP:
        return 14;
    case pcpp::SLL:
        return 15;
    case pcpp::SSL:
        return 16;
    case pcpp::DHCP:
        return 17;
    case pcpp::NULL_LOOPBACK:
        return 18;
    case pcpp::IGMP:
    case pcpp::IGMPv1:
    case pcpp::IGMPv2:
    case pcpp::IGMPv3:
        return 19;
    case pcpp::VXLAN:
        return 20;
    case pcpp::SIP:
        return 21;
    case pcpp::SDP:
        return 22;
    case pcpp::Radius:
        return 23;
    case pcpp::GTP:
        return 24;
    case pcpp::EthernetDot3:
        return 25;
    case pcpp::BGP:
        return 26;
    case pcpp::SSH:
        return 27;
    case pcpp::IPSec:
    case pcpp::AuthenticationHeader:
    case pcpp::ESP:
        return 28;
    case pcpp::DHCPv6:
        return 29;
    case pcpp::NTP:
        return 30;
    case pcpp::Telnet:
        return 31;
    case pcpp::FTP:
        return 32;
    case pcpp::ICMPv6:
        return 33;
    case pcpp::LLC:
        return 34;
    case pcpp::STP:
        return 35;
    case pcpp::SomeIP:
        return 36;
    case pcpp::WakeOnLan:
        return 37;
    case pcpp::GenericPayload:
        return 38;
    case pcpp::PacketTrailer:
        return 39;
    default:
        return 0;
    }
}

std::string getProtocolTypeAsString(pcpp::ProtocolType protocolType)
{
    switch (protocolType)
    {
    case pcpp::Ethernet:
        return "Ethernet";
    case pcpp::IPv4:
        return "IPv4";
    case pcpp::IPv6:
        return "IPv6";
    case pcpp::UDP:
        return "UDP";
    case pcpp::TCP:
        return "TCP";
    case pcpp::HTTPRequest:
    case pcpp::HTTPResponse:
    case pcpp::HTTP:
        return "HTTP";
    case pcpp::ARP:
        return "ARP";
    case pcpp::VLAN:
        return "VLAN";
    case pcpp::ICMP:
        return "ICMP";
    case pcpp::PPPoE:
    case pcpp::PPPoESession:
    case pcpp::PPPoEDiscovery:
        return "PPPoE";
    case pcpp::DNS:
        return "DNS";
    case pcpp::MPLS:
        return "MPLS";
    case pcpp::GRE:
    case pcpp::GREv0:
    case pcpp::GREv1:
        return "GRE";
    case pcpp::PPP_PPTP:
        return "PPP_PPTP";
    case pcpp::SLL:
        return "SLL";
    case pcpp::SSL:
        return "SSL";
    case pcpp::DHCP:
        return "DHCP";
    case pcpp::NULL_LOOPBACK:
        return "NULL_LOOPBACK";
    case pcpp::IGMP:
    case pcpp::IGMPv1:
    case pcpp::IGMPv2:
    case pcpp::IGMPv3:
        return "IGMP";
    case pcpp::GenericPayload:
        return "GenericPayload";
    case pcpp::VXLAN:
        return "VXLAN";
    case pcpp::SIP:
        return "SIP";
    case pcpp::SDP:
        return "SDP";
    case pcpp::PacketTrailer:
        return "PacketTrailer";
    case pcpp::Radius:
        return "Radius";
    case pcpp::GTP:
        return "GTP";
    case pcpp::EthernetDot3:
        return "EthernetDot3";
    case pcpp::BGP:
        return "BGP";
    case pcpp::SSH:
        return "SSH";
    case pcpp::IPSec:
    case pcpp::AuthenticationHeader:
    case pcpp::ESP:
        return "IPSec";
    case pcpp::DHCPv6:
        return "DHCPv6";
    case pcpp::NTP:
        return "NTP";
    case pcpp::Telnet:
        return "Telnet";
    case pcpp::FTP:
        return "FTP";
    case pcpp::ICMPv6:
        return "ICMPv6";
    case pcpp::LLC:
        return "LLC";
    case pcpp::STP:
        return "STP";
    case pcpp::SomeIP:
        return "SomeIP";
    case pcpp::WakeOnLan:
        return "WakeOnLan";
    default:
        return "Unknown";
    }
}